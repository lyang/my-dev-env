---
- name: "Git Clone rbenv/rbenv"
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv.git
    dest: "{{ansible_env.HOME}}/.rbenv"
  register: RBENV_REPO

- name: "Git Clone rbenv/ruby-build"
  ansible.builtin.git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: "{{ansible_env.HOME}}/.rbenv/plugins/ruby-build"
  register: RBENV_RUBY_BUILD_REPO

- name: "Config And Make"
  ansible.builtin.shell:
    cmd: "src/configure && make -C src"
    chdir: "{{ansible_env.HOME}}/.rbenv"
  when: RBENV_REPO.changed or RBENV_RUBY_BUILD_REPO.changed

- name: "Config zsh Environment"
  ansible.builtin.lineinfile:
    path: "{{ansible_env.HOME}}/.zshrc"
    line: source {{role_path}}/files/rbenv.sh
    create: yes

- name: "Config bash Environment"
  ansible.builtin.lineinfile:
    path: "{{ansible_env.HOME}}/.bashrc"
    line: source {{role_path}}/files/rbenv.sh
    create: yes

- name: "List Installed Versions"
  ansible.builtin.shell:
    executable: "{{ZSH_PATH}}"
    cmd: |
      source {{role_path}}/files/rbenv.sh
      rbenv versions --bare
  register: RUBY_INSTALLED_VERSIONS
  changed_when: false

- name: "Install Ruby Versions"
  ansible.builtin.include_tasks: "install.yaml"
  loop: "{{RUBY_VERSIONS}}"
  loop_control:
    loop_var: ruby_version
  when: ruby_version not in RUBY_INSTALLED_VERSIONS.stdout_lines

- name: "Set Global Ruby Version"
  ansible.builtin.shell:
    executable: "{{ZSH_PATH}}"
    cmd: |
      source {{role_path}}/files/rbenv.sh
      rbenv global {{RUBY_VERSIONS[-1]}}
  when: RUBY_VERSIONS|last != RUBY_INSTALLED_VERSIONS.stdout_lines|last|default('N/A')

